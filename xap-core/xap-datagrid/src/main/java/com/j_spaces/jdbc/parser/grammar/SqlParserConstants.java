/*
 * Copyright (c) 2008-2016, GigaSpaces Technologies, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Generated By:JavaCC: Do not edit this line. SqlParserConstants.java */
package com.j_spaces.jdbc.parser.grammar;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SqlParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ALTER = 5;
  /** RegularExpression Id. */
  int ADD = 6;
  /** RegularExpression Id. */
  int ALL = 7;
  /** RegularExpression Id. */
  int AND = 8;
  /** RegularExpression Id. */
  int ASC = 9;
  /** RegularExpression Id. */
  int AVG = 10;
  /** RegularExpression Id. */
  int BETWEEN = 11;
  /** RegularExpression Id. */
  int BY = 12;
  /** RegularExpression Id. */
  int CREATE = 13;
  /** RegularExpression Id. */
  int CALL = 14;
  /** RegularExpression Id. */
  int DROP = 15;
  /** RegularExpression Id. */
  int DEFAULT_NULL = 16;
  /** RegularExpression Id. */
  int DESC = 17;
  /** RegularExpression Id. */
  int DISTINCT = 18;
  /** RegularExpression Id. */
  int END = 19;
  /** RegularExpression Id. */
  int FROM = 20;
  /** RegularExpression Id. */
  int GROUP = 21;
  /** RegularExpression Id. */
  int IN = 22;
  /** RegularExpression Id. */
  int IS = 23;
  /** RegularExpression Id. */
  int LIKE = 24;
  /** RegularExpression Id. */
  int RLIKE = 25;
  /** RegularExpression Id. */
  int MAX = 26;
  /** RegularExpression Id. */
  int MIN = 27;
  /** RegularExpression Id. */
  int NOT = 28;
  /** RegularExpression Id. */
  int NULL = 29;
  /** RegularExpression Id. */
  int OR = 30;
  /** RegularExpression Id. */
  int ORDER = 31;
  /** RegularExpression Id. */
  int SELECT = 32;
  /** RegularExpression Id. */
  int SUBSTR = 33;
  /** RegularExpression Id. */
  int SUM = 34;
  /** RegularExpression Id. */
  int SYSDATE = 35;
  /** RegularExpression Id. */
  int WHERE = 36;
  /** RegularExpression Id. */
  int COUNT = 37;
  /** RegularExpression Id. */
  int DELETE = 38;
  /** RegularExpression Id. */
  int EXCEPTION = 39;
  /** RegularExpression Id. */
  int ROWNUM = 40;
  /** RegularExpression Id. */
  int INDEX = 41;
  /** RegularExpression Id. */
  int INSERT = 42;
  /** RegularExpression Id. */
  int INTO = 43;
  /** RegularExpression Id. */
  int SET = 44;
  /** RegularExpression Id. */
  int TABLE = 45;
  /** RegularExpression Id. */
  int FOR_UPDATE = 46;
  /** RegularExpression Id. */
  int UPDATE = 47;
  /** RegularExpression Id. */
  int UNION = 48;
  /** RegularExpression Id. */
  int VALUES = 49;
  /** RegularExpression Id. */
  int COMMIT = 50;
  /** RegularExpression Id. */
  int ROLLBACK = 51;
  /** RegularExpression Id. */
  int PRIMARY_KEY = 52;
  /** RegularExpression Id. */
  int PARTITION_BY = 53;
  /** RegularExpression Id. */
  int UID = 54;
  /** RegularExpression Id. */
  int USING = 55;
  /** RegularExpression Id. */
  int AS = 56;
  /** RegularExpression Id. */
  int NULLS_LAST = 57;
  /** RegularExpression Id. */
  int NULLS_FIRST = 58;
  /** RegularExpression Id. */
  int DATE = 59;
  /** RegularExpression Id. */
  int DATETIME = 60;
  /** RegularExpression Id. */
  int TIME = 61;
  /** RegularExpression Id. */
  int FLOAT = 62;
  /** RegularExpression Id. */
  int REAL = 63;
  /** RegularExpression Id. */
  int DOUBLE = 64;
  /** RegularExpression Id. */
  int NUMBER = 65;
  /** RegularExpression Id. */
  int DECIMAL = 66;
  /** RegularExpression Id. */
  int NUMERIC = 67;
  /** RegularExpression Id. */
  int BOOLEAN = 68;
  /** RegularExpression Id. */
  int INTEGER = 69;
  /** RegularExpression Id. */
  int VARCHAR = 70;
  /** RegularExpression Id. */
  int VARCHAR2 = 71;
  /** RegularExpression Id. */
  int CHAR = 72;
  /** RegularExpression Id. */
  int LONG = 73;
  /** RegularExpression Id. */
  int CLOB = 74;
  /** RegularExpression Id. */
  int BLOB = 75;
  /** RegularExpression Id. */
  int EMPTY_CLOB = 76;
  /** RegularExpression Id. */
  int EMPTY_BLOB = 77;
  /** RegularExpression Id. */
  int LOB = 78;
  /** RegularExpression Id. */
  int TRUE = 79;
  /** RegularExpression Id. */
  int FALSE = 80;
  /** RegularExpression Id. */
  int INT = 81;
  /** RegularExpression Id. */
  int TIMESTAMP = 82;
  /** RegularExpression Id. */
  int LONGVARCHAR = 83;
  /** RegularExpression Id. */
  int TINYINT = 84;
  /** RegularExpression Id. */
  int SMALLINT = 85;
  /** RegularExpression Id. */
  int BIGINT = 86;
  /** RegularExpression Id. */
  int BIT = 87;
  /** RegularExpression Id. */
  int IDENTIFIER = 88;
  /** RegularExpression Id. */
  int ESC_IDENTIFIER = 89;
  /** RegularExpression Id. */
  int LETTER = 90;
  /** RegularExpression Id. */
  int DIGIT = 91;
  /** RegularExpression Id. */
  int RELATION = 92;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 93;
  /** RegularExpression Id. */
  int LONG_LITERAL = 94;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 95;
  /** RegularExpression Id. */
  int EXPONENT = 96;
  /** RegularExpression Id. */
  int STRING_LITERAL = 97;
  /** RegularExpression Id. */
  int DATE_LITERAL = 98;
  /** RegularExpression Id. */
  int ASSIGN = 99;
  /** RegularExpression Id. */
  int CONCAT = 100;
  /** RegularExpression Id. */
  int SEMICOLON = 101;
  /** RegularExpression Id. */
  int DOT = 102;
  /** RegularExpression Id. */
  int ROWTYPE = 103;
  /** RegularExpression Id. */
  int TILDE = 104;
  /** RegularExpression Id. */
  int LESS = 105;
  /** RegularExpression Id. */
  int LESSEQUAL = 106;
  /** RegularExpression Id. */
  int GREATER = 107;
  /** RegularExpression Id. */
  int GREATEREQUAL = 108;
  /** RegularExpression Id. */
  int EQUAL = 109;
  /** RegularExpression Id. */
  int NOTEQUAL = 110;
  /** RegularExpression Id. */
  int NOTEQUAL2 = 111;
  /** RegularExpression Id. */
  int JOINPLUS = 112;
  /** RegularExpression Id. */
  int OPENPAREN = 113;
  /** RegularExpression Id. */
  int CLOSEPAREN = 114;
  /** RegularExpression Id. */
  int OPENBRACKET = 115;
  /** RegularExpression Id. */
  int CLOSEBRACKET = 116;
  /** RegularExpression Id. */
  int ASTERISK = 117;
  /** RegularExpression Id. */
  int SLASH = 118;
  /** RegularExpression Id. */
  int PLUS = 119;
  /** RegularExpression Id. */
  int MINUS = 120;
  /** RegularExpression Id. */
  int QUESTIONMARK = 121;
  /** RegularExpression Id. */
  int OPENBRAKET = 122;
  /** RegularExpression Id. */
  int CLOSEBRAKET = 123;
  /** RegularExpression Id. */
  int COLLECTION_CONTAINS = 124;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\t\"",
    "\"alter\"",
    "\"add\"",
    "\"all\"",
    "\"and\"",
    "\"asc\"",
    "\"avg\"",
    "\"between\"",
    "\"by\"",
    "\"create\"",
    "\"call\"",
    "\"drop\"",
    "\"default null\"",
    "\"desc\"",
    "\"distinct\"",
    "\"end\"",
    "\"from\"",
    "\"group\"",
    "\"in\"",
    "\"is\"",
    "\"like\"",
    "\"rlike\"",
    "\"max\"",
    "\"min\"",
    "\"not\"",
    "\"null\"",
    "\"or\"",
    "\"order\"",
    "\"select\"",
    "\"substr\"",
    "\"sum\"",
    "\"sysdate\"",
    "\"where\"",
    "\"count\"",
    "\"delete\"",
    "\"exception\"",
    "\"rownum\"",
    "\"index\"",
    "\"insert\"",
    "\"into\"",
    "\"set\"",
    "\"table\"",
    "\"for update\"",
    "\"update\"",
    "\"union\"",
    "\"values\"",
    "\"commit\"",
    "\"rollback\"",
    "\"primary key\"",
    "\"partition by\"",
    "\"uid\"",
    "\"using\"",
    "\"as\"",
    "\"nulls last\"",
    "\"nulls first\"",
    "\"date\"",
    "\"datetime\"",
    "\"time\"",
    "\"float\"",
    "\"real\"",
    "\"double\"",
    "\"number\"",
    "\"decimal\"",
    "\"numeric\"",
    "\"boolean\"",
    "\"integer\"",
    "\"varchar\"",
    "\"varchar2\"",
    "\"char\"",
    "\"long\"",
    "\"clob\"",
    "\"blob\"",
    "\"empty_clob()\"",
    "\"empty_blob()\"",
    "\"lob\"",
    "\"true\"",
    "\"false\"",
    "\"int\"",
    "\"timestamp\"",
    "\"longvarchar\"",
    "\"tinyint\"",
    "\"smallint\"",
    "\"bigint\"",
    "\"bit\"",
    "<IDENTIFIER>",
    "<ESC_IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<RELATION>",
    "<INTEGER_LITERAL>",
    "<LONG_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<DATE_LITERAL>",
    "\":=\"",
    "\"||\"",
    "\";\"",
    "\".\"",
    "\"%ROWTYPE\"",
    "\"~\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"=\"",
    "\"!=\"",
    "\"<>\"",
    "\"(+)\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"*\"",
    "\"/\"",
    "\"+\"",
    "\"-\"",
    "\"?\"",
    "\"{\"",
    "\"}\"",
    "\"[*]\"",
    "\",\"",
    "\"$\"",
  };

}
